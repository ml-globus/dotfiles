VIM
===

<leader> is \ by default

movement/selection:
    $               EOL
    0               Beginning of line
    b               Go back one word
    ^               First non white-space char (e.g `d^` deletes from cursor to indentation)
    {/}             Move up/down a paragraph
    <ctrl>e         Move screen down one line without moving cursor
    <ctrl>y         Move screen up one line without moving cursor
    v/<term>        Mark forward from cursor to <term>
    v?<term>        Mark backward from cursor to <term>
    '[a-z]          Go to mark a-z, set by m[a-z]
    v'[a-z]         Select from cursor to mark a-z
    vi" / vi'       Select text inside "/'
    v%              Select inside parenthesis (inclusive), if on starting/ending paren
    vib             Select inside parenthesis (exclusive), if inside paren
    <ctrl>o         Go back to previous location
    <ctrl>i         Go forward to next location
    `.              Go to last insert
    :g/expr/y A     Yank all lines matching expr into register a. (May need to
                    first empty it, e.g. by recording an empty macro: qaq)

macros:
    q               Start recording, followed by <char>, and stops recording
    @<char>         Play macro <char>. Can be preceded by number
    :%norm! @m      Apply macro m to every line of file

misc:
    :new            New [No Name] buffer
    :!r <command>   Read output of command into current buffer
    :new|r! ls      Read output of command into new unnamed buffer (also works with tabnew)
    :!rm %          Delete file for current buffer
    S               Delete line and put in insert mode, at the right indentation level

split navigation:
    <ctrl>h/j/k/l   Also works for navigating to/from tmux panes
    <ctrl>w r       Rotate splits

jedi-vim:
    <leader>g       goto assignments
    <leader>d       goto definitions
    K               Show documentation
    <leader>r       Renaming (seems broken: https://github.com/davidhalter/jedi-vim/issues/253)
    <leader>n       Show all usages of a name
    :Pyimport       Open module (e.g. :Pyimport os) -- mostly doesn't work...

vim-indent-object:
    <command>ai             <command> (i.e, v for select, d for delete, etc) current
                            indent-level + the line that "initalizes" it (i.e func header)
    <command><count>ai      <command> <count> indent levels + the line that "initalizes" it
    <command><count>ii      Like above, but don't include lines above/below
    <command><count>aI      Also include line that terminates the indentation

ale:
    <ctrl>n         Next error/warning
    <ctrl>m         Previous error/warning

vim-fugitive/vim-gitgutter:
    :G              Git status. Can do numerous operations from here; press `g?` for details.
                    Press enter on file to open. Refreshes automatically when you re-enter the split.
    :Gblame         Git blame. Press `o` on commit to view commit details.
    :Git <cmd> %    Does <cmd> (e.g. add/checkout/rm/mv) on current buffer
    [c / ]c         Jump between change hunks (same as standard vimdiff)
    <leader>hp      Preview hunk under cursor (vim-gitgutter)
    <leader>hu      Undo hunk under cursor (vim-gitgutter)
    <leader>hs      Stage hunk under cursor (vim-gitgutter)

TMUX
====

<prefix> is <ctrl>b by default

pane navigation:
    <ctrl>h/j/k/l   Also works for navigating to/from vim splits

toggle zoom:
    <prefix>z

split panes:
    <prefix>"       Horizontal split
    <prefix>%       Vertical split

GIT
===

git remote show origin      # Show remote info
git commit -v               # Only commit already staged changes; view changes while editing commit message
git diff --staged           # Show only changes which have already been staged
git show <revhash>          # Show commmit
git commit -pv              # Interactively select chunks and commit in one go; view changes in commit message.
                            # Option summary:
                            #   y - stage this hunk
                            #   n - do not stage this hunk
                            #   q - quit; do not stage this hunk or any of the remaining ones
                            #   a - stage this hunk and all later hunks in the file
                            #   d - do not stage this hunk or any of the later hunks in the file
                            #   g - select a hunk to go to
                            #   / - search for a hunk matching the given regex
                            #   j - leave this hunk undecided, see next undecided hunk
                            #   J - leave this hunk undecided, see next hunk
                            #   k - leave this hunk undecided, see previous undecided hunk
                            #   K - leave this hunk undecided, see previous hunk
                            #   s - split the current hunk into smaller hunks
                            #   e - manually edit the current hunk
                            #   ? - print help
